//13. Разработайте программу в консольном приложении для работы с целочисленным
//двумерным массивом.
//1. Реализовать возможность ввода размерности массива и его элементов из текстового файла
//(+1.5)
//2. Вычислить первый нечетный элемент и его позицию(номер строки и номер столбца)
//и вывести их на экран. (+1)
//
//3. Найти в каждом столбце с четным номером максимальный элемент и вывести
//найденные значения(+1) в текстовый файл в столбик(+1).
//4. Проверьте, все ли элементы массива нечетные и выведите соответствующее
//сообщение на экран(+1).
//5. Заменить все четные элементы массива на количество цифр в них(+1).Оформить
//алгоритм в виде функции(+1)
//6. Вывести измененный массив на экран в виде матрицы(+1.5)
//7. Найти минимальный четный элемент массива и вывести его на экран(+1).
//Вывод информации должен сопровождаться соответствующими комментариями.Не
//использовать библиотеку cmath.
#include <iostream>
#include <fstream>
using namespace std;
int vvod(int a[20][20], int& n, int& m)

{

    fstream f;

    f.open("vvod.txt", ios::in);

    f >> n >> m;

    for (int i = 0; i < n; i++)

        for (int j = 0; j < m; j++)

            f >> a[i][j];

    f.close();

    return 0;

}

void vivod(int a[20][20], int& n, int& m)

{

    ofstream f;

    f.open("vvod.txt", ios::app);

    f << "Mas \n ";

    for (int i = 0; i < n; i++)

    {

        for (int j = 0; j < m; j++)

            f << a[i][j] << " ";

        f << "\n ";

    }

    f.close();

}
void pervne4et(int a[20][20], int n, int m) {
    //2. Вычислить первый нечетный элемент и его позицию(номер строки и номер столбца)
//и вывести их на экран. (+1)
    int oddFound;
    int oddNum;
    int oddNumPosI;
    int oddNumPosJ;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (j % m == 0)
            {
                cout << endl;
            }
            cout << a[i][j] << " ";
        }
    }
    //3. Найти в каждом столбце с четным номером максимальный элемент и вывести
//найденные значения(+1) в текстовый файл в столбик(+1).
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (a[i][j] % 2 != 0)
            {
                oddFound = true;
                oddNum = a[i][j];
                oddNumPosI = i;
                oddNumPosJ = j;
            }
            if (oddFound == true)
            {
                break;
            }
        }
        if (oddFound == true)
        {
            break;
        }
    }
    cout << "\nПервый нечетный элемент массива: " << oddNum << endl;
    cout << "Номер строки и столбца: " << "[" << oddNumPosI + 1 << ";" << oddNumPosJ + 1 << "] ";
    cout << endl;
    fstream d;
    d.open("vivod.txt", ios::app);

    int g;
    d << endl;
    for (int j = 0; j < m; j++)
    {
        g = a[0][j];
        for (int i = 0; i < n; i++)
        {
            if (g < a[i][j] && j % 2 == 1)
            {
                g = a[i][j];
            }
        }
        if (j % 2 == 1)
        {
            d << "максимальный элемент в столбике с четным номером = " << g << endl;
        }
    }
    d.close();




}
void proverka(int a[20][20], int n, int m) {
    //4. Проверьте, все ли элементы массива нечетные и выведите соответствующее
//сообщение на экран(+1).
    int counter = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (a[i][j] % 2 == 1) {
                counter++;
            }
        }
    }
    if (counter == (n * m))
    {
        cout << "Все элементы массива нечетные! " << endl;
    }
    else
    {
        cout << "НЕ все элементы массива нечетные! " << endl;
    }
}
void chet(int a[20][20], int n, int m)
{
    //5. Заменить все четные элементы массива на количество цифр в них(+1).Оформить
//алгоритм в виде функции(+1)
    //6. Вывести измененный массив на экран в виде матрицы(+1.5)
    int c, s = 0;
    cout << "Новый массив(снизу)" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            s = 0;
            if (a[i][j] % 2 == 0)
            {
                c = a[i][j];
                while (c > 0)
                {
                    c /= 10;
                    s++;
                }
                cout << s << " ";
            }
            else
            {
                cout << a[i][j] << " ";
            }
        }
        cout << endl;
    }
}
void min(int a[20][20], int n, int m) {
    int minchet = a[0][0];
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (minchet > a[i][j] && a[i][j] % 2 == 0)
            {
                minchet = a[i][j];
            }
        }
    }
    if (minchet % 2 == 0)
    {
        cout << "Минимальный четный элемент массива = " << minchet << endl;
    }
    else
    {
        cout << "В массиве нету четных элементов " << endl;
    }
}

int main()
{
    setlocale(LC_ALL, "RUS");
    int a[20][20];
    int n, m, c;
    int score = 0;
    //1. Реализовать возможность ввода размерности массива и его элементов из текстового файла
//(+1.5)
    vvod(a, n, m);
    cout << "Размеры двумерного массива " << n << " " << m << endl;
   
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            score++;
            cout << a[i][j] << " ";
            if (score % n == 0) {
                cout << endl;
            }
        }
    }
    //2. Вычислить первый нечетный элемент и его позицию(номер строки и номер столбца)
//и вывести их на экран. (+1)
//
//3. Найти в каждом столбце с четным номером максимальный элемент и вывести
//найденные значения(+1) в текстовый файл в столбик(+1).
    pervne4et(a, n, m);
   //4. Проверьте, все ли элементы массива нечетные и выведите соответствующее
    proverka(a, n, m);
    //5. Заменить все четные элементы массива на количество цифр в них(+1).Оформить
//алгоритм в виде функции(+1)
    //6. Вывести измененный массив на экран в виде матрицы(+1.5)
    chet(a, n, m);
    //7. Найти минимальный четный элемент массива и вывести его на экран(+1).
    min(a, n, m);
    
}

 